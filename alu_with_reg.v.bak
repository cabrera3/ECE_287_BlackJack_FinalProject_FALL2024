module alu_with_reg (

	//////////// ADC //////////
	//output		          		ADC_CONVST,
	//output		          		ADC_DIN,
	//input 		          		ADC_DOUT,
	//output		          		ADC_SCLK,

	//////////// Audio //////////
	//input 		          		AUD_ADCDAT,
	//inout 		          		AUD_ADCLRCK,
	//inout 		          		AUD_BCLK,
	//output		          		AUD_DACDAT,
	//inout 		          		AUD_DACLRCK,
	//output		          		AUD_XCK,

	//////////// CLOCK //////////
	//input 		          		CLOCK2_50,
	//input 		          		CLOCK3_50,
	//input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	//output		    [12:0]		DRAM_ADDR,
	//output		     [1:0]		DRAM_BA,
	//output		          		DRAM_CAS_N,
	//output		          		DRAM_CKE,
	//output		          		DRAM_CLK,
	//output		          		DRAM_CS_N,
	//inout 		    [15:0]		DRAM_DQ,
	//output		          		DRAM_LDQM,
	//output		          		DRAM_RAS_N,
	//output		          		DRAM_UDQM,
	//output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	//output		          		FPGA_I2C_SCLK,
	//inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	//output		     [6:0]		HEX4,
	//output		     [6:0]		HEX5,

	//////////// IR //////////
	//input 		          		IRDA_RXD,
	//output		          		IRDA_TXD,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	//inout 		          		PS2_CLK,
	//inout 		          		PS2_CLK2,
	//inout 		          		PS2_DAT,
	//inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW

	//////////// Video-In //////////
	//input 		          		TD_CLK27,
	//input 		     [7:0]		TD_DATA,
	//input 		          		TD_HS,
	//output		          		TD_RESET_N,
	//input 		          		TD_VS,

	//////////// VGA //////////
	//output		          		VGA_BLANK_N,
	//output		     [7:0]		VGA_B,
	//output		          		VGA_CLK,
	//output		     [7:0]		VGA_G,
	//output		          		VGA_HS,
	//output		     [7:0]		VGA_R,
	//output		          		VGA_SYNC_N,
	//output		          		VGA_VS,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	//inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	//inout 		    [35:0]		GPIO_1
);

//	Turn on all display
	//assign	HEX0		=	7'h00;
	//assign	HEX1		=	7'h00;
	//assign	HEX2		=	7'h00;
	//assign	HEX3		=	7'h00;
	//assign	HEX4		=	7'h00;
	//assign	HEX5		=	7'h00;
	//assign	GPIO_0		=	36'hzzzzzzzzz;
	//assign	GPIO_1		=	36'hzzzzzzzzz;
	//assign LEDR[9:0] = 10'd0;

wire [8:0]ins;
wire [6:0]seg7_neg_sign;
wire [6:0]seg7_dig0;
wire [6:0]seg7_dig1;
wire [6:0]seg7_dig2;

assign HEX0 = seg7_dig0;
assign HEX1 = seg7_dig1;
assign HEX2 = seg7_dig2; // constant 0
assign HEX3 = seg7_neg_sign;
	
assign ins = SW[8:0];
	
assign LEDR[2:0] = alu_control;
assign LEDR[4:3] = val_to_display;
assign LEDR[9:8] = S;
assign LEDR[7:5] = alu_result;

wire clk;
assign clk = KEY[3];
wire rst;
assign rst = KEY[2];

wire [1:0]val_to_display; // {0 = C, 1 = A, 2 = B}
assign val_to_display = KEY[1:0];

wire [7:0]alu_result;

wire[7:0]out_A;
wire[7:0]out_B;
wire[7:0]out_C;

reg[7:0]in_A;
reg[7:0]in_B;

reg [7:0]seven_seg_in;

/* 
Toggler to accept instructions as an FSM:
- Basically, 1st time you press the clock we go from the START state LEDR[9:8] show 00 to...
- LEDR[9:8] show 2'b01; set the SW for the control; clock (KEY[3]) and we do READ_INST. 
- LEDR[9:8] show 2'b10; set the SW for the input if needed; clock (KEY[3]) and we do EXECUTE. 
- LEDR[9:8] show 2'b01; ... 
...
*/
reg [1:0]S;
reg [1:0]NS;
parameter 	START = 2'd0,
			READ_INST = 2'd1,
			EXECUTE = 2'd2;
		
always @(posedge clk or negedge rst)
begin
	if (rst == 1'b0)
		S <= START;
	else
		S <= NS;
end
		
always @(*)
begin
	case (S)
		START: NS = READ_INST;
		READ_INST: NS = EXECUTE;
		EXECUTE: NS = READ_INST;
		default: NS = START;
	endcase
end
	
always @(posedge clk or negedge rst)
begin
	if (rst == 1'b0)
	begin
		/* rst control */
	end
	else
	begin
		case (S)
			START:
			begin
				/* rst control */
			end
			READ_INST:
			begin
				// set control bits on this state
				
			end
			EXECUTE:
			begin
				// reset control bits - same as "rst" here are mine
				en_a <= 1'b0;
				sel_a_path <= 1'b0; // {0 = in, 1 = C}
				en_b <= 1'b0;
				sel_b_path <= 1'b0; // {0 = in, 1 = C}
				en_c <= 1'b0;
				alu_control <= 3'b000;
			end
		endcase
	end
		
end

/* create the module to display the 8 bit result */
three_decimal_vals_w_neg two_d(seven_seg_in, seg7_neg_sign, seg7_dig0, seg7_dig1, seg7_dig2);

/* registers A, B, C instantiate */
register A(clk, rst, 
register B(clk, rst, 
register C(clk, rst, 

/* intantiate the alu */
alu my_alu( , , alu_control, );

/* mux control paths */
always @(*)
begin
	/* Mux for input a */
		
	/* Mux for input b */
		
	/* Mux for display path */
	if (val_to_display == 2'd0)
	
end

endmodule